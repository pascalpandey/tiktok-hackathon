// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int       @id @default(autoincrement())
  username  String    @unique
  name      String?
  password  String
  bio       String?
  imgUrl    String?   @default("https://utfs.io/f/dc21e7aa-e118-4452-9540-dc5220ea476b_profile-user-icon-isolated-on-white-background-eps10-free-vector.jpg")
  following User[]    @relation("following")
  followers User[]    @relation("following")
  comments  Comment[]
  reviews   Review[]
  likes     Int       @default(0)
  shop      Shop?
}

model Shop {
  shopId   Int     @id @default(autoincrement())
  location String?
  items    Item[]
  userId   Int     @unique
  user     User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Item {
  itemId      Int      @id @default(autoincrement())
  imageUrl    String
  description String
  name        String
  price       Float
  shopId      Int
  rating      Float?
  shop        Shop     @relation(fields: [shopId], references: [shopId], onDelete: Cascade)
  reviews     Review[]
}

model Review {
  reviewId    Int       @id @default(autoincrement())
  likes       Int       @default(0)
  userId      Int
  rating      Float
  description String
  itemId      Int
  videoUrl    String
  comments    Comment[]
  user        User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  item        Item      @relation(fields: [itemId], references: [itemId], onDelete: Cascade)
}

model Comment {
  commentId Int      @id @default(autoincrement())
  reviewId  Int
  date      DateTime @default(now())
  comment   String
  userId    Int
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  review    Review   @relation(fields: [reviewId], references: [reviewId], onDelete: Cascade)
}
